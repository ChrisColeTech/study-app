"use strict";var f=Object.defineProperty;var w=Object.getOwnPropertyDescriptor;var R=Object.getOwnPropertyNames;var T=Object.prototype.hasOwnProperty;var C=(o,e)=>{for(var t in e)f(o,t,{get:e[t],enumerable:!0})},I=(o,e,t,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of R(e))!T.call(o,n)&&n!==t&&f(o,n,{get:()=>e[n],enumerable:!(r=w(e,n))||r.enumerable});return o};var D=o=>I(f({},"__esModule",{value:!0}),o);var k={};C(k,{handler:()=>q});module.exports=D(k);var g=class extends Error{constructor(t,r,n){super(r);this.code=t;this.details=n;this.name="ApiError"}};var a=class{static success(e,t=200,r){let n={success:!0,data:e,message:r,timestamp:new Date().toISOString(),version:this.VERSION};return{statusCode:t,headers:this.CORS_HEADERS,body:JSON.stringify(n)}}static error(e,t="INTERNAL_ERROR",r,n=500){let i={success:!1,error:e,message:`[${t}] ${e}`,timestamp:new Date().toISOString(),version:this.VERSION,...r&&{data:r}};return{statusCode:n,headers:this.CORS_HEADERS,body:JSON.stringify(i)}}static badRequest(e,t){return this.error(e,"VALIDATION_ERROR",t,400)}static unauthorized(e="Unauthorized"){return this.error(e,"UNAUTHORIZED",void 0,401)}static forbidden(e="Forbidden"){return this.error(e,"FORBIDDEN",void 0,403)}static notFound(e="Resource not found"){return this.error(e,"NOT_FOUND",void 0,404)}static rateLimited(e="Rate limit exceeded"){return this.error(e,"RATE_LIMITED",void 0,429)}static internalError(e="Internal server error"){return this.error(e,"INTERNAL_ERROR",void 0,500)}static cors(){return{statusCode:200,headers:{...this.CORS_HEADERS,"Access-Control-Max-Age":"86400"},body:""}}static health(e){return this.success({status:"healthy",timestamp:new Date().toISOString(),version:this.VERSION,environment:process.env.STAGE||"unknown",...e})}static paginated(e,t,r,n,i){let s=Math.ceil(t/n),c=r<s,l=r>1;return this.success({items:e,pagination:{totalCount:t,totalPages:s,currentPage:r,pageSize:n,hasNextPage:c,hasPrevPage:l}},200,i)}};a.VERSION="2.0.0",a.CORS_HEADERS={"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Headers":"Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Auth-Token","Access-Control-Allow-Methods":"GET,POST,PUT,DELETE,OPTIONS,HEAD","Access-Control-Allow-Credentials":"true","Cache-Control":"no-cache, no-store, must-revalidate",Pragma:"no-cache",Expires:"0"};var u=class{constructor(e){this.context=e,this.logLevel=process.env.LOG_LEVEL||"INFO"}info(e,t){this.shouldLog("INFO")&&this.log("INFO",e,t)}debug(e,t){this.shouldLog("DEBUG")&&this.log("DEBUG",e,t)}warn(e,t){this.shouldLog("WARN")&&this.log("WARN",e,t)}error(e,t){let r=t instanceof Error?{name:t.name,message:t.message,stack:t.stack}:t;this.log("ERROR",e,r)}perf(e,t,r){this.info(`Performance: ${e}`,{duration:`${t}ms`,operation:e,...r})}log(e,t,r){let n={timestamp:new Date().toISOString(),level:e,context:this.context,message:t,stage:process.env.STAGE||"unknown",version:"2.0.0",...r&&{data:r}};switch(e){case"ERROR":console.error(JSON.stringify(n));break;case"WARN":console.warn(JSON.stringify(n));break;default:console.log(JSON.stringify(n))}}shouldLog(e){let t=["ERROR","WARN","INFO","DEBUG"],r=t.indexOf(this.logLevel);return t.indexOf(e)<=r}};var p=class{constructor(e){this.handlerName=e;this.version="2.0.0";this.logger=new u(e)}withAuth(e){return async t=>{let r=t.requestContext.requestId,n=`${t.httpMethod} ${t.resource}`;try{if(this.logger.info(`[${r}] ${n} - Request started`,{httpMethod:t.httpMethod,resource:t.resource,userAgent:t.headers["User-Agent"],sourceIp:t.requestContext.identity.sourceIp}),t.httpMethod==="OPTIONS")return a.cors();let i=this.extractUserId(t);if(!i)return this.logger.warn(`[${r}] ${n} - No userId in authorizer context`,{authorizerContext:t.requestContext.authorizer}),a.unauthorized("User not authenticated");this.logger.info(`[${r}] ${n} - Authenticated user: ${i}`);let s=await this.validateRequest(t);if(s)return this.logger.warn(`[${r}] ${n} - Validation failed`,s),a.badRequest(s.message,s);let c=Date.now(),l=await e(t,i),A=Date.now()-c;return this.logger.info(`[${r}] ${n} - Request completed`,{statusCode:l.statusCode,duration:`${A}ms`}),l}catch(i){return this.logger.error(`[${r}] ${n} - Request failed`,i),this.handleError(i)}}}withoutAuth(e){return async t=>{let r=t.requestContext.requestId,n=`${t.httpMethod} ${t.resource}`;try{if(this.logger.info(`[${r}] ${n} - Public request started`),t.httpMethod==="OPTIONS")return a.cors();let i=Date.now(),s=await e(t),c=Date.now()-i;return this.logger.info(`[${r}] ${n} - Public request completed`,{statusCode:s.statusCode,duration:`${c}ms`}),s}catch(i){return this.logger.error(`[${r}] ${n} - Public request failed`,i),this.handleError(i)}}}extractUserId(e){let t=e.requestContext.authorizer;return t&&(t.userId||t.principalId||t.claims?.userId||t.claims?.sub)||null}async validateRequest(e){return null}handleError(e){return e instanceof g?a.error(e.message,e.code,e.details):e.name==="ValidationError"?a.badRequest(e.message):e.name==="UnauthorizedError"?a.unauthorized(e.message):e.name==="ForbiddenError"?a.forbidden(e.message):e.name==="NotFoundError"?a.notFound(e.message):a.internalError("An unexpected error occurred")}parseJsonBody(e){if(!e.body)return null;try{let t=e.body;return e.isBase64Encoded&&(t=Buffer.from(e.body,"base64").toString("utf-8")),this.logger.debug("Parsing request body",{isBase64Encoded:e.isBase64Encoded,bodyLength:t.length,rawBody:t.substring(0,200)}),JSON.parse(t)}catch(t){throw this.logger.error("JSON parsing failed",{body:e.body,bodyString:bodyString.substring(0,200),isBase64Encoded:e.isBase64Encoded,error:t.message,contentType:e.headers["Content-Type"]||e.headers["content-type"]}),new g("VALIDATION_ERROR","Invalid JSON in request body")}}getQueryParam(e,t,r){return e.queryStringParameters?.[t]||r}getPathParam(e,t){return e.pathParameters?.[t]}getHeader(e,t){return e.headers[t]||e.headers[t.toLowerCase()]}success(e,t){return a.success(e,200,t)}created(e,t){return a.success(e,201,t)}noContent(){return a.success(null,204)}badRequest(e,t){return a.badRequest(e,t)}notFound(e){return a.notFound(e)}internalError(e){return a.internalError(e)}};var m=require("@aws-sdk/client-s3");var y=class{constructor(){this.logger=new u("S3Service"),this.bucketName=process.env.DATA_BUCKET||"study-app-data",this.region=process.env.AWS_REGION||"us-east-1",this.client=new m.S3Client({region:this.region}),this.logger.info("S3Service initialized",{bucketName:this.bucketName,region:this.region})}async getJsonObject(e){let t=Date.now();try{this.logger.debug("Fetching object from S3",{key:e,bucket:this.bucketName});let r=new m.GetObjectCommand({Bucket:this.bucketName,Key:e}),n=await this.client.send(r);if(!n.Body)return this.logger.warn("Empty response body from S3",{key:e}),null;let i=await n.Body.transformToString(),s=JSON.parse(i);return this.logger.perf("S3 getJsonObject",Date.now()-t,{key:e,sizeBytes:i.length}),s}catch(r){if(this.logger.error("Failed to get object from S3",{key:e,bucket:this.bucketName,error:r instanceof Error?r.message:r}),r instanceof Error&&r.name==="NoSuchKey")return null;throw r}}async putJsonObject(e,t){let r=Date.now();try{let n=JSON.stringify(t,null,2);this.logger.debug("Putting object to S3",{key:e,sizeBytes:n.length});let i=new m.PutObjectCommand({Bucket:this.bucketName,Key:e,Body:n,ContentType:"application/json",ServerSideEncryption:"AES256"});await this.client.send(i),this.logger.perf("S3 putJsonObject",Date.now()-r,{key:e,sizeBytes:n.length}),this.logger.info("Successfully uploaded object to S3",{key:e})}catch(n){throw this.logger.error("Failed to put object to S3",{key:e,bucket:this.bucketName,error:n instanceof Error?n.message:n}),n}}async listObjects(e){let t=Date.now();try{this.logger.debug("Listing objects from S3",{prefix:e});let r=new m.ListObjectsV2Command({Bucket:this.bucketName,Prefix:e,MaxKeys:1e3}),i=((await this.client.send(r)).Contents||[]).map(s=>s.Key).filter(s=>s!==void 0);return this.logger.perf("S3 listObjects",Date.now()-t,{prefix:e,count:i.length}),i}catch(r){throw this.logger.error("Failed to list objects from S3",{prefix:e,bucket:this.bucketName,error:r instanceof Error?r.message:r}),r}}async objectExists(e){try{let t=new m.GetObjectCommand({Bucket:this.bucketName,Key:e});return await this.client.send(t),!0}catch(t){if(t instanceof Error&&t.name==="NoSuchKey")return!1;throw t}}getBucketName(){return this.bucketName}};var S=require("@aws-sdk/client-dynamodb"),d=require("@aws-sdk/lib-dynamodb");var v=class{constructor(){this.logger=new u("CacheService"),this.tableName=process.env.CACHE_TABLE||"study-app-cache",this.region=process.env.AWS_REGION||"us-east-1";let e=new S.DynamoDBClient({region:this.region});this.client=d.DynamoDBDocumentClient.from(e),this.logger.info("CacheService initialized",{tableName:this.tableName,region:this.region})}async get(e){let t=Date.now();try{this.logger.debug("Getting item from cache",{key:e});let r=new d.GetCommand({TableName:this.tableName,Key:{cacheKey:e}}),n=await this.client.send(r);if(!n.Item)return this.logger.debug("Cache miss",{key:e}),null;let i=Date.now();return n.Item.ttl&&n.Item.ttl*1e3<i?(this.logger.debug("Cache item expired",{key:e,ttl:n.Item.ttl}),null):(this.logger.perf("Cache get",Date.now()-t,{key:e,hit:!0,sizeBytes:JSON.stringify(n.Item.data).length}),n.Item.data)}catch(r){return this.logger.error("Failed to get item from cache",{key:e,error:r}),null}}async put(e,t,r=60){let n=Date.now();try{let i=Math.floor(Date.now()/1e3)+r*60,s={cacheKey:e,data:t,ttl:i,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};this.logger.debug("Putting item in cache",{key:e,ttlMinutes:r,sizeBytes:JSON.stringify(t).length});let c=new d.PutCommand({TableName:this.tableName,Item:s});await this.client.send(c),this.logger.perf("Cache put",Date.now()-n,{key:e,ttlMinutes:r,sizeBytes:JSON.stringify(t).length})}catch(i){this.logger.error("Failed to put item in cache",{key:e,error:i})}}getProvidersCacheKey(){return"providers:all"}getProviderCacheKey(e){return`provider:${e}`}getQuestionsCacheKey(e,t){return`questions:${e}:${t}`}getQuestionStatsCacheKey(e,t){return`stats:questions:${e}:${t}`}getFilteredQuestionsCacheKey(e,t,r,n){let i=this.hashObject({filter:r,pagination:n});return`filtered:${e}:${t}:${i}`}hashObject(e){let t=JSON.stringify(e,Object.keys(e).sort()),r=0;for(let n=0;n<t.length;n++){let i=t.charCodeAt(n);r=(r<<5)-r+i,r=r&r}return Math.abs(r).toString(36)}async clearCache(e){this.logger.warn("Cache clear not implemented for DynamoDB",{pattern:e})}async getCacheStats(){return{tableName:this.tableName,region:this.region}}},b=class{constructor(){this.memoryCache=new Map;this.memoryTtl=5*60*1e3;this.dynamoCache=new v,this.logger=new u("MultiLayerCache")}async get(e){let t=this.memoryCache.get(e);if(t&&Date.now()-t.timestamp<t.ttl)return this.logger.debug("Memory cache hit",{key:e}),t.data;t&&this.memoryCache.delete(e);let r=await this.dynamoCache.get(e);return r?(this.memoryCache.set(e,{data:r,timestamp:Date.now(),ttl:this.memoryTtl}),this.logger.debug("DynamoDB cache hit, stored in memory",{key:e}),r):(this.logger.debug("Cache miss on all layers",{key:e}),null)}async put(e,t,r=60){this.memoryCache.set(e,{data:t,timestamp:Date.now(),ttl:this.memoryTtl}),await this.dynamoCache.put(e,t,r),this.logger.debug("Stored in multi-layer cache",{key:e,memoryTtlMinutes:this.memoryTtl/6e4,dynamoTtlMinutes:r})}clearMemoryCache(){let e=this.memoryCache.size;this.memoryCache.clear(),this.logger.info("Cleared memory cache",{entriesRemoved:e})}async getStats(){let e=0;for(let[r,n]of this.memoryCache.entries())e+=JSON.stringify(n).length;let t=await this.dynamoCache.getCacheStats();return{memory:{entries:this.memoryCache.size,totalSizeBytes:e},dynamo:t}}cleanup(){let e=Date.now(),t=0;for(let[r,n]of this.memoryCache.entries())e-n.timestamp>=n.ttl&&(this.memoryCache.delete(r),t++);t>0&&this.logger.debug("Cleaned up expired memory cache entries",{removed:t})}};var h=class{constructor(){this.s3Service=new y,this.cache=new b,this.logger=new u("ProviderService")}async getAllProviders(){let e=Date.now(),t="providers:all";try{let r=await this.cache.get(t);if(r)return this.logger.debug("Returning cached providers"),r;this.logger.info("Loading providers from S3");let n=await this.loadProvidersFromS3();return await this.cache.put(t,n,360),this.logger.perf("getAllProviders",Date.now()-e,{providerCount:n.length,totalExams:n.reduce((i,s)=>i+s.exams.length,0)}),n}catch(r){throw this.logger.error("Failed to get all providers",r),r}}async getProvider(e){let t=Date.now(),r=`provider:${e}`;try{let n=await this.cache.get(r);if(n)return this.logger.debug("Returning cached provider",{providerId:e}),n;this.logger.info("Loading specific provider from S3",{providerId:e});let i=await this.loadProviderFromS3(e);if(i)return await this.cache.put(r,i,360),this.logger.perf("getProvider",Date.now()-t,{providerId:e}),i;let c=(await this.getAllProviders()).find(l=>l.id===e);return c&&await this.cache.put(r,c,360),this.logger.perf("getProvider",Date.now()-t,{providerId:e,found:!!c}),c||null}catch(n){throw this.logger.error("Failed to get provider",{providerId:e,error:n}),n}}async getExam(e,t){try{let r=await this.getProvider(e);return r&&r.exams.find(n=>n.id===t)||null}catch(r){throw this.logger.error("Failed to get exam",{providerId:e,examId:t,error:r}),r}}async getProviderStats(){try{let e=await this.getAllProviders();return{totalProviders:e.length,totalExams:e.reduce((t,r)=>t+(r.exams?.length||0),0),providerBreakdown:e.reduce((t,r)=>(t[r.id]=r.exams?.length||0,t),{})}}catch(e){throw this.logger.error("Failed to get provider stats",e),e}}clearCache(){this.cache.clearMemoryCache(),this.logger.info("Provider cache cleared")}async loadProvidersFromS3(){try{let e=await this.s3Service.getJsonObject("providers/providers.json");if(e)return e;this.logger.debug("Consolidated providers file not found, trying individual files");let t=await this.s3Service.listObjects("providers/"),r=[];for(let n of t)if(n.endsWith(".json")&&n!=="providers/providers.json"){let i=await this.s3Service.getJsonObject(n);i&&r.push(i)}return r.length>0?r:(this.logger.warn("No providers found in S3, returning default providers"),this.getDefaultProviders())}catch(e){return this.logger.error("Failed to load providers from S3, falling back to defaults",e),this.getDefaultProviders()}}async loadProviderFromS3(e){try{return await this.s3Service.getJsonObject(`providers/${e}.json`)}catch{return this.logger.debug("Failed to load specific provider from S3",{providerId:e}),null}}getDefaultProviders(){return[{id:"aws",name:"Amazon Web Services",description:"Cloud computing platform and services",exams:[{id:"saa-c03",name:"Solutions Architect Associate",description:"Validates ability to design distributed systems on AWS",questionCount:681,duration:130,passingScore:720},{id:"dva-c01",name:"Developer Associate",description:"Validates ability to develop applications on AWS",questionCount:0,duration:130,passingScore:720},{id:"soa-c02",name:"SysOps Administrator Associate",description:"Validates ability to deploy and manage systems on AWS",questionCount:0,duration:130,passingScore:720}]},{id:"azure",name:"Microsoft Azure",description:"Cloud computing platform and services",exams:[{id:"az-900",name:"Azure Fundamentals",description:"Validates foundational knowledge of cloud services",questionCount:0,duration:60,passingScore:700},{id:"az-104",name:"Azure Administrator",description:"Validates skills to manage Azure subscriptions and resources",questionCount:0,duration:150,passingScore:700}]},{id:"gcp",name:"Google Cloud Platform",description:"Cloud computing platform and services",exams:[{id:"ace",name:"Associate Cloud Engineer",description:"Validates ability to deploy and manage GCP resources",questionCount:0,duration:120,passingScore:70}]}]}};var x=class extends p{constructor(){super("ExamHandler"),this.providerService=new h}async getAllExams(e,t){this.logger.info("Fetching all exams",{userId:t});try{let n=(await this.providerService.getAllProviders()).flatMap(i=>i.exams?.map(s=>({...s,provider:{id:i.id,name:i.name}}))||[]);return this.success(n,"All exams retrieved successfully")}catch(r){return this.logger.error("Failed to fetch all exams",{userId:t,error:r}),this.internalError("Failed to retrieve exams")}}async getExam(e,t){let r=this.getPathParam(e,"examId");if(!r)return this.badRequest("Exam ID is required");this.logger.info("Fetching specific exam",{userId:t,examId:r});try{let n=await this.providerService.getAllProviders();for(let i of n){if(!i.exams)continue;let s=i.exams.find(c=>c.id===r);if(s)return this.success({...s,provider:{id:i.id,name:i.name}},`Exam '${r}' retrieved successfully`)}return this.notFound(`Exam '${r}' not found`)}catch(n){return this.logger.error("Failed to fetch specific exam",{userId:t,examId:r,error:n}),this.internalError("Failed to retrieve exam")}}async getExamTopics(e,t){let r=this.getPathParam(e,"examId");if(!r)return this.badRequest("Exam ID is required");this.logger.info("Fetching exam topics",{userId:t,examId:r});try{let n=await this.providerService.getAllProviders(),i=!1;for(let c of n)if(c.exams?.find(l=>l.id===r)){i=!0;break}if(!i)return this.notFound(`Exam '${r}' not found`);let s=["Identity and Access Management (IAM)","Compute Services (EC2, Lambda)","Storage Services (S3, EBS)","Database Services (RDS, DynamoDB)","Networking (VPC, CloudFront)","Security and Compliance","Monitoring and Logging (CloudWatch)","Cost Optimization"];return this.success(s,`Topics for exam '${r}' retrieved successfully`)}catch(n){return this.logger.error("Failed to fetch exam topics",{userId:t,examId:r,error:n}),this.internalError("Failed to retrieve exam topics")}}async handleRequest(e,t){let{httpMethod:r,resource:n}=e,i=this.getPathParam(e,"examId");if(r!=="GET")return this.methodNotAllowed(`${r} method not supported`);try{return n.includes("/exams/{examId}/topics")?this.getExamTopics(e,t):i?this.getExam(e,t):this.getAllExams(e,t)}catch(s){return this.logger.error("Route handling failed",{resource:n,httpMethod:r,userId:t,error:s}),this.internalError("Request processing failed")}}methodNotAllowed(e){return{statusCode:405,headers:{"Content-Type":"application/json"},body:JSON.stringify({error:e})}}},P=new x,q=P.withAuth((o,e)=>P.handleRequest(o,e));0&&(module.exports={handler});
//# sourceMappingURL=index.js.map
