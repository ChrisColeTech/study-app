"use strict";var N=Object.create;var R=Object.defineProperty;var z=Object.getOwnPropertyDescriptor;var F=Object.getOwnPropertyNames;var B=Object.getPrototypeOf,Q=Object.prototype.hasOwnProperty;var $=(o,e)=>{for(var t in e)R(o,t,{get:e[t],enumerable:!0})},q=(o,e,t,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of F(e))!Q.call(o,n)&&n!==t&&R(o,n,{get:()=>e[n],enumerable:!(r=z(e,n))||r.enumerable});return o};var M=(o,e,t)=>(t=o!=null?N(B(o)):{},q(e||!o||!o.__esModule?R(t,"default",{value:o,enumerable:!0}):t,o)),V=o=>q(R({},"__esModule",{value:!0}),o);var J={};$(J,{handler:()=>j});module.exports=V(J);var T=class extends Error{constructor(t,r,n){super(r);this.code=t;this.details=n;this.name="ApiError"}};var m=class{static success(e,t=200,r){let n={success:!0,data:e,message:r,timestamp:new Date().toISOString(),version:this.VERSION};return{statusCode:t,headers:this.CORS_HEADERS,body:JSON.stringify(n)}}static error(e,t="INTERNAL_ERROR",r,n=500){let a={success:!1,error:e,message:`[${t}] ${e}`,timestamp:new Date().toISOString(),version:this.VERSION,...r&&{data:r}};return{statusCode:n,headers:this.CORS_HEADERS,body:JSON.stringify(a)}}static badRequest(e,t){return this.error(e,"VALIDATION_ERROR",t,400)}static unauthorized(e="Unauthorized"){return this.error(e,"UNAUTHORIZED",void 0,401)}static forbidden(e="Forbidden"){return this.error(e,"FORBIDDEN",void 0,403)}static notFound(e="Resource not found"){return this.error(e,"NOT_FOUND",void 0,404)}static rateLimited(e="Rate limit exceeded"){return this.error(e,"RATE_LIMITED",void 0,429)}static internalError(e="Internal server error"){return this.error(e,"INTERNAL_ERROR",void 0,500)}static cors(){return{statusCode:200,headers:{...this.CORS_HEADERS,"Access-Control-Max-Age":"86400"},body:""}}static health(e){return this.success({status:"healthy",timestamp:new Date().toISOString(),version:this.VERSION,environment:process.env.STAGE||"unknown",...e})}static paginated(e,t,r,n,a){let i=Math.ceil(t/n),s=r<i,l=r>1;return this.success({items:e,pagination:{totalCount:t,totalPages:i,currentPage:r,pageSize:n,hasNextPage:s,hasPrevPage:l}},200,a)}};m.VERSION="2.0.0",m.CORS_HEADERS={"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Headers":"Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Auth-Token","Access-Control-Allow-Methods":"GET,POST,PUT,DELETE,OPTIONS,HEAD","Access-Control-Allow-Credentials":"true","Cache-Control":"no-cache, no-store, must-revalidate",Pragma:"no-cache",Expires:"0"};var v=class{constructor(e){this.context=e,this.logLevel=process.env.LOG_LEVEL||"INFO"}info(e,t){this.shouldLog("INFO")&&this.log("INFO",e,t)}debug(e,t){this.shouldLog("DEBUG")&&this.log("DEBUG",e,t)}warn(e,t){this.shouldLog("WARN")&&this.log("WARN",e,t)}error(e,t){let r=t instanceof Error?{name:t.name,message:t.message,stack:t.stack}:t;this.log("ERROR",e,r)}perf(e,t,r){this.info(`Performance: ${e}`,{duration:`${t}ms`,operation:e,...r})}log(e,t,r){let n={timestamp:new Date().toISOString(),level:e,context:this.context,message:t,stage:process.env.STAGE||"unknown",version:"2.0.0",...r&&{data:r}};switch(e){case"ERROR":console.error(JSON.stringify(n));break;case"WARN":console.warn(JSON.stringify(n));break;default:console.log(JSON.stringify(n))}}shouldLog(e){let t=["ERROR","WARN","INFO","DEBUG"],r=t.indexOf(this.logLevel);return t.indexOf(e)<=r}};var w=class{constructor(e){this.handlerName=e;this.version="2.0.0";this.logger=new v(e)}withAuth(e){return async t=>{let r=t.requestContext.requestId,n=`${t.httpMethod} ${t.resource}`;try{if(this.logger.info(`[${r}] ${n} - Request started`,{httpMethod:t.httpMethod,resource:t.resource,userAgent:t.headers["User-Agent"],sourceIp:t.requestContext.identity.sourceIp}),t.httpMethod==="OPTIONS")return m.cors();let a=this.extractUserId(t);if(!a)return this.logger.warn(`[${r}] ${n} - No userId in authorizer context`,{authorizerContext:t.requestContext.authorizer}),m.unauthorized("User not authenticated");this.logger.info(`[${r}] ${n} - Authenticated user: ${a}`);let i=await this.validateRequest(t);if(i)return this.logger.warn(`[${r}] ${n} - Validation failed`,i),m.badRequest(i.message,i);let s=Date.now(),l=await e(t,a),u=Date.now()-s;return this.logger.info(`[${r}] ${n} - Request completed`,{statusCode:l.statusCode,duration:`${u}ms`}),l}catch(a){return this.logger.error(`[${r}] ${n} - Request failed`,a),this.handleError(a)}}}withoutAuth(e){return async t=>{let r=t.requestContext.requestId,n=`${t.httpMethod} ${t.resource}`;try{if(this.logger.info(`[${r}] ${n} - Public request started`),t.httpMethod==="OPTIONS")return m.cors();let a=Date.now(),i=await e(t),s=Date.now()-a;return this.logger.info(`[${r}] ${n} - Public request completed`,{statusCode:i.statusCode,duration:`${s}ms`}),i}catch(a){return this.logger.error(`[${r}] ${n} - Public request failed`,a),this.handleError(a)}}}extractUserId(e){let t=e.requestContext.authorizer;return t&&(t.userId||t.principalId||t.claims?.userId||t.claims?.sub)||null}async validateRequest(e){return null}handleError(e){return e instanceof T?m.error(e.message,e.code,e.details):e.name==="ValidationError"?m.badRequest(e.message):e.name==="UnauthorizedError"?m.unauthorized(e.message):e.name==="ForbiddenError"?m.forbidden(e.message):e.name==="NotFoundError"?m.notFound(e.message):m.internalError("An unexpected error occurred")}parseJsonBody(e){if(!e.body)return null;try{let t=e.body;return e.isBase64Encoded&&(t=Buffer.from(e.body,"base64").toString("utf-8")),this.logger.debug("Parsing request body",{isBase64Encoded:e.isBase64Encoded,bodyLength:t.length,rawBody:t.substring(0,200)}),JSON.parse(t)}catch(t){throw this.logger.error("JSON parsing failed",{body:e.body,bodyString:bodyString.substring(0,200),isBase64Encoded:e.isBase64Encoded,error:t.message,contentType:e.headers["Content-Type"]||e.headers["content-type"]}),new T("VALIDATION_ERROR","Invalid JSON in request body")}}getQueryParam(e,t,r){return e.queryStringParameters?.[t]||r}getPathParam(e,t){return e.pathParameters?.[t]}getHeader(e,t){return e.headers[t]||e.headers[t.toLowerCase()]}success(e,t){return m.success(e,200,t)}created(e,t){return m.success(e,201,t)}noContent(){return m.success(null,204)}badRequest(e,t){return m.badRequest(e,t)}notFound(e){return m.notFound(e)}internalError(e){return m.internalError(e)}};var _=require("@aws-sdk/client-dynamodb"),S=require("@aws-sdk/lib-dynamodb"),A=require("@aws-sdk/client-s3");var d=[];for(let o=0;o<256;++o)d.push((o+256).toString(16).slice(1));function O(o,e=0){return(d[o[e+0]]+d[o[e+1]]+d[o[e+2]]+d[o[e+3]]+"-"+d[o[e+4]]+d[o[e+5]]+"-"+d[o[e+6]]+d[o[e+7]]+"-"+d[o[e+8]]+d[o[e+9]]+"-"+d[o[e+10]]+d[o[e+11]]+d[o[e+12]]+d[o[e+13]]+d[o[e+14]]+d[o[e+15]]).toLowerCase()}var G=M(require("crypto")),x=new Uint8Array(256),P=x.length;function k(){return P>x.length-16&&(G.default.randomFillSync(x),P=0),x.slice(P,P+=16)}var L=M(require("crypto")),E={randomUUID:L.default.randomUUID};function K(o,e,t){if(E.randomUUID&&!e&&!o)return E.randomUUID();o=o||{};let r=o.random||(o.rng||k)();if(r[6]=r[6]&15|64,r[8]=r[8]&63|128,e){t=t||0;for(let n=0;n<16;++n)e[t+n]=r[n];return e}return O(r)}var y=K;var I=class{constructor(e){this.performanceHistory=new Map;this.lastHealthCheck=null;this.logger=new v("HealthService");let t=new _.DynamoDBClient({region:process.env.AWS_REGION||"us-east-1"});this.client=S.DynamoDBDocumentClient.from(t),this.s3Client=new A.S3Client({region:process.env.AWS_REGION||"us-east-1"}),this.config={enabled:!0,interval:300,timeout:30,retries:3,dependencies:{dynamodb:{enabled:!0,tables:[process.env.USERS_TABLE||"StudyApp-Users",process.env.SESSIONS_TABLE||"StudyApp-Sessions",process.env.GOALS_TABLE||"StudyApp-Goals",process.env.ANALYTICS_TABLE||"StudyApp-Analytics"],performanceChecks:!0},s3:{enabled:!0,buckets:[process.env.DATA_BUCKET||"study-app-data"],performanceChecks:!0},external:{enabled:!1,services:[]}},dataQuality:{enabled:!0,checks:[{name:"User Count Check",table:process.env.USERS_TABLE||"StudyApp-Users",checkType:"count",query:"scan",threshold:0,critical:!1},{name:"Active Sessions Check",table:process.env.SESSIONS_TABLE||"StudyApp-Sessions",checkType:"count",query:"scan",threshold:0,critical:!1}]},alerts:{enabled:!0,thresholds:[{metric:"response_time",warningThreshold:1e3,errorThreshold:2e3,criticalThreshold:5e3,comparison:"greater_than",enabled:!0},{metric:"error_rate",warningThreshold:1,errorThreshold:5,criticalThreshold:10,comparison:"greater_than",enabled:!0},{metric:"memory_usage",warningThreshold:70,errorThreshold:85,criticalThreshold:95,comparison:"greater_than",enabled:!0}]},...e},this.logger.info("HealthService initialized",{config:this.config})}async performHealthCheck(){let e=Date.now(),t=new Date().toISOString();this.logger.info("Starting comprehensive health check");try{let[r,n,a,i]=await Promise.all([this.getEnvironmentInfo(),this.checkDependencyHealth(),this.collectPerformanceMetrics(),this.performDataQualityChecks()]),s=await this.generateAlerts(n,a,i),l=this.generateRecommendations(n,a,i,s),u=this.determineOverallStatus(n,a,i,s),c={status:u,timestamp:t,environment:r,dependencies:n,performance:a,dataQuality:i,alerts:s,recommendations:l};this.lastHealthCheck=c;let g=Date.now()-e;return this.logger.info("Health check completed",{status:u,duration:g,alertsCount:s.length,recommendationsCount:l.length}),c}catch(r){return this.logger.error("Health check failed",{error:r}),{status:"unhealthy",timestamp:t,environment:await this.getEnvironmentInfo(),dependencies:{dynamodb:{status:"unhealthy",tables:[],connectivity:{canConnect:!1,responseTime:0,lastChecked:t},performance:{readLatency:0,writeLatency:0,throughputUtilization:0,errorRate:100},capacity:{consumedReadCapacity:0,consumedWriteCapacity:0,provisionedReadCapacity:0,provisionedWriteCapacity:0,utilizationPercentage:0}},s3:{status:"unhealthy",buckets:[],connectivity:{canConnect:!1,responseTime:0,lastChecked:t},performance:{uploadLatency:0,downloadLatency:0,errorRate:100}},external:[],overall:"unhealthy"},performance:this.getDefaultPerformanceMetrics(),dataQuality:{overall:"poor",checks:[],lastAssessment:t,trends:{dataConsistency:"degrading",dataCompleteness:"degrading",dataAccuracy:"degrading",dataDuplication:"degrading"}},alerts:[{alertId:y(),severity:"critical",category:"availability",title:"Health Check System Failure",description:"The health check system itself has failed",source:"HealthService",currentValue:"failed",impact:"Cannot assess system health",recommendations:["Check HealthService logs","Verify AWS service permissions"],createdAt:t,acknowledged:!1,tags:["system","critical"]}],recommendations:["Investigate HealthService failure","Check AWS credentials and permissions","Review system logs"]}}}async getEnvironmentInfo(){let e=process.hrtime.bigint();return{stage:process.env.STAGE||"unknown",version:"2.0.0",region:process.env.AWS_REGION||"unknown",functionName:process.env.AWS_LAMBDA_FUNCTION_NAME||"unknown",memorySize:process.env.AWS_LAMBDA_FUNCTION_MEMORY_SIZE||"unknown",logLevel:process.env.LOG_LEVEL||"INFO",uptime:Number(process.hrtime.bigint()-e)/1e6,coldStart:process.env.AWS_LAMBDA_INITIALIZATION_TYPE==="on-demand"}}async checkDependencyHealth(){let[e,t,r]=await Promise.all([this.checkDynamoDBHealth(),this.checkS3Health(),this.checkExternalServiceHealth()]),n=[e.status,t.status];r.forEach(i=>n.push(i.status));let a="healthy";return n.includes("unhealthy")?a="unhealthy":n.includes("degraded")&&(a="degraded"),{dynamodb:e,s3:t,external:r,overall:a}}async checkDynamoDBHealth(){if(!this.config.dependencies.dynamodb.enabled)return{status:"healthy",tables:[],connectivity:{canConnect:!0,responseTime:0,lastChecked:new Date().toISOString()},performance:{readLatency:0,writeLatency:0,throughputUtilization:0,errorRate:0},capacity:{consumedReadCapacity:0,consumedWriteCapacity:0,provisionedReadCapacity:0,provisionedWriteCapacity:0,utilizationPercentage:0}};let e=Date.now(),t=[],r="healthy";try{let n=await this.client.send(new S.ScanCommand({TableName:this.config.dependencies.dynamodb.tables[0],Limit:1,Select:"COUNT"})),a={canConnect:!0,responseTime:Date.now()-e,lastChecked:new Date().toISOString()};for(let u of this.config.dependencies.dynamodb.tables)try{let c=await this.checkTableHealth(u);t.push(c),c.status==="unhealthy"?r="unhealthy":c.status==="degraded"&&r==="healthy"&&(r="degraded")}catch(c){this.logger.warn("Failed to check table health",{tableName:u,error:c}),t.push({tableName:u,status:"unhealthy",readCapacityUtilization:0,writeCapacityUtilization:0,errors:[`Health check failed: ${c instanceof Error?c.message:"Unknown error"}`]}),r="unhealthy"}let i=a.responseTime,s={readLatency:i*.6,writeLatency:i*.8,throughputUtilization:this.calculateAverageThroughputUtilization(t),errorRate:this.calculateErrorRate(t)};return{status:r,tables:t,connectivity:a,performance:s,capacity:{consumedReadCapacity:0,consumedWriteCapacity:0,provisionedReadCapacity:0,provisionedWriteCapacity:0,utilizationPercentage:0}}}catch(n){return this.logger.error("DynamoDB health check failed",{error:n}),{status:"unhealthy",tables:[],connectivity:{canConnect:!1,responseTime:Date.now()-e,lastChecked:new Date().toISOString()},performance:{readLatency:0,writeLatency:0,throughputUtilization:0,errorRate:100},capacity:{consumedReadCapacity:0,consumedWriteCapacity:0,provisionedReadCapacity:0,provisionedWriteCapacity:0,utilizationPercentage:0}}}}async checkTableHealth(e){try{let t=Date.now(),r=await this.client.send(new S.ScanCommand({TableName:e,Select:"COUNT",Limit:1e3})),n=Date.now()-t,a="healthy";return n>2e3?a="unhealthy":n>1e3&&(a="degraded"),{tableName:e,status:a,itemCount:r.Count||0,readCapacityUtilization:this.estimateCapacityUtilization(n,"read"),writeCapacityUtilization:0,errors:[]}}catch(t){return this.logger.warn("Table health check failed",{tableName:e,error:t}),{tableName:e,status:"unhealthy",readCapacityUtilization:0,writeCapacityUtilization:0,errors:[`Health check failed: ${t instanceof Error?t.message:"Unknown error"}`]}}}async checkS3Health(){if(!this.config.dependencies.s3.enabled)return{status:"healthy",buckets:[],connectivity:{canConnect:!0,responseTime:0,lastChecked:new Date().toISOString()},performance:{uploadLatency:0,downloadLatency:0,errorRate:0}};let e=Date.now(),t=[],r="healthy";try{for(let i of this.config.dependencies.s3.buckets)try{let s=Date.now();await this.s3Client.send(new A.HeadBucketCommand({Bucket:i}));let l=await this.s3Client.send(new A.ListObjectsV2Command({Bucket:i,MaxKeys:10})),u=Date.now()-s,c="healthy";u>2e3?(c="unhealthy",r="unhealthy"):u>1e3&&(c="degraded",r==="healthy"&&(r="degraded")),t.push({bucketName:i,status:c,accessible:!0,objectCount:l.KeyCount||0,errors:[]})}catch(s){this.logger.warn("S3 bucket health check failed",{bucketName:i,error:s}),t.push({bucketName:i,status:"unhealthy",accessible:!1,errors:[`Health check failed: ${s instanceof Error?s.message:"Unknown error"}`]}),r="unhealthy"}let n={canConnect:!0,responseTime:Date.now()-e,lastChecked:new Date().toISOString()},a={uploadLatency:0,downloadLatency:Date.now()-e,errorRate:t.filter(i=>!i.accessible).length/t.length*100};return{status:r,buckets:t,connectivity:n,performance:a}}catch(n){return this.logger.error("S3 health check failed",{error:n}),{status:"unhealthy",buckets:[],connectivity:{canConnect:!1,responseTime:Date.now()-e,lastChecked:new Date().toISOString()},performance:{uploadLatency:0,downloadLatency:0,errorRate:100}}}}async checkExternalServiceHealth(){if(!this.config.dependencies.external.enabled||this.config.dependencies.external.services.length===0)return[];let e=[];for(let t of this.config.dependencies.external.services)try{let r=Date.now(),n=await fetch(t.url,{method:t.method,headers:t.headers,signal:AbortSignal.timeout(t.timeout*1e3)}),a=Date.now()-r,i="healthy";n.status!==t.expectedStatusCode?i="unhealthy":a>2e3&&(i="degraded"),e.push({serviceName:t.name,url:t.url,status:i,responseTime:a,statusCode:n.status,lastChecked:new Date().toISOString(),uptime:i==="healthy"?100:0,errors:i==="unhealthy"?[`Unexpected status code: ${n.status}`]:[]})}catch(r){e.push({serviceName:t.name,url:t.url,status:"unhealthy",responseTime:0,lastChecked:new Date().toISOString(),uptime:0,errors:[`Health check failed: ${r instanceof Error?r.message:"Unknown error"}`]})}return e}async collectPerformanceMetrics(){let e=process.memoryUsage(),t=parseInt(process.env.AWS_LAMBDA_FUNCTION_MEMORY_SIZE||"512"),r={current:Math.round(e.rss/1024/1024),peak:Math.round(e.heapUsed/1024/1024),limit:t,utilizationPercentage:Math.round(e.rss/1024/1024/t*100),gcFrequency:0},n={coldStartFrequency:process.env.AWS_LAMBDA_INITIALIZATION_TYPE==="on-demand"?100:0,averageExecutionTime:this.getAverageResponseTime(),p95ExecutionTime:this.getPercentileResponseTime(95),p99ExecutionTime:this.getPercentileResponseTime(99),timeouts:0},a={requestsPerSecond:this.getCurrentRPS(),requestsPerMinute:this.getCurrentRPM(),requestsPerHour:this.getCurrentRPH(),peakThroughput:this.getPeakThroughput(),averageResponseTime:this.getAverageResponseTime()},i={errorRate:this.getCurrentErrorRate(),errorCount:this.getCurrentErrorCount(),errorsByType:this.getErrorsByType(),criticalErrors:0,warnings:0},s={responseTimeTrend:this.analyzeResponseTimeTrend(),errorRateTrend:this.analyzeErrorRateTrend(),throughputTrend:this.analyzeThroughputTrend(),memoryUsageTrend:this.analyzeMemoryUsageTrend()};return{memory:r,execution:n,throughput:a,errors:i,trends:s}}async performDataQualityChecks(){if(!this.config.dataQuality.enabled)return{overall:"good",checks:[],lastAssessment:new Date().toISOString(),trends:{dataConsistency:"stable",dataCompleteness:"stable",dataAccuracy:"stable",dataDuplication:"stable"}};let e=[],t=0;for(let a of this.config.dataQuality.checks)try{let i=await this.performDataQualityCheck(a);e.push(i),i.status==="passed"&&t++}catch(i){this.logger.warn("Data quality check failed",{checkName:a.name,error:i}),e.push({checkName:a.name,table:a.table,status:"failed",result:{expected:a.expectedValue||"unknown",actual:"error"},lastChecked:new Date().toISOString(),impact:a.critical?"critical":"medium",description:`Check failed: ${i instanceof Error?i.message:"Unknown error"}`})}let r=e.length>0?t/e.length:1,n="excellent";return r<.5?n="poor":r<.7?n="fair":r<.9&&(n="good"),{overall:n,checks:e,lastAssessment:new Date().toISOString(),trends:{dataConsistency:"stable",dataCompleteness:"stable",dataAccuracy:"stable",dataDuplication:"stable"}}}async performDataQualityCheck(e){let t=Date.now(),n=(await this.client.send(new S.ScanCommand({TableName:e.table,Select:"COUNT"}))).Count||0,a=e.threshold||0,i="passed";return n<a&&(i=e.critical?"failed":"warning"),{checkName:e.name,table:e.table,status:i,result:{expected:a,actual:n,threshold:e.threshold},lastChecked:new Date().toISOString(),impact:e.critical?"critical":"medium",description:`Table ${e.table} has ${n} records${a>0?` (expected >= ${a})`:""}`}}async generateAlerts(e,t,r){let n=[];for(let a of this.config.alerts.thresholds){if(!a.enabled)continue;let i=0,s="";switch(a.metric){case"response_time":i=t.throughput.averageResponseTime,s="Average Response Time";break;case"error_rate":i=t.errors.errorRate,s="Error Rate";break;case"memory_usage":i=t.memory.utilizationPercentage,s="Memory Usage";break}let l=this.determineSeverity(i,a);l!=="info"&&n.push({alertId:y(),severity:l,category:"performance",title:`${s} Threshold Exceeded`,description:`${s} is ${i}${a.metric==="memory_usage"||a.metric==="error_rate"?"%":"ms"}, which exceeds the ${l} threshold`,source:"HealthService",threshold:{metric:a.metric,value:this.getThresholdValue(a,l),comparison:a.comparison},currentValue:i,impact:this.getAlertImpact(a.metric,l),recommendations:this.getAlertRecommendations(a.metric,l),createdAt:new Date().toISOString(),acknowledged:!1,tags:["performance",a.metric]})}return e.overall!=="healthy"&&n.push({alertId:y(),severity:e.overall==="degraded"?"warning":"error",category:"availability",title:"Dependency Health Issues",description:`One or more system dependencies are ${e.overall}`,source:"HealthService",currentValue:e.overall,impact:"System functionality may be impacted",recommendations:["Check individual dependency status","Review connection configurations"],createdAt:new Date().toISOString(),acknowledged:!1,tags:["dependencies","availability"]}),(r.overall==="poor"||r.overall==="fair")&&n.push({alertId:y(),severity:r.overall==="poor"?"error":"warning",category:"data_quality",title:"Data Quality Issues Detected",description:`Overall data quality is ${r.overall}`,source:"HealthService",currentValue:r.overall,impact:"Data integrity and application functionality may be compromised",recommendations:["Review failed data quality checks","Investigate data consistency issues"],createdAt:new Date().toISOString(),acknowledged:!1,tags:["data_quality"]}),n}generateRecommendations(e,t,r,n){let a=[];return t.memory.utilizationPercentage>80&&a.push("Consider increasing Lambda memory allocation to improve performance"),t.throughput.averageResponseTime>1e3&&a.push("Optimize database queries and implement caching strategies"),t.errors.errorRate>1&&a.push("Investigate and resolve recurring errors to improve reliability"),e.dynamodb.status!=="healthy"&&a.push("Review DynamoDB table configurations and capacity settings"),e.s3.status!=="healthy"&&a.push("Check S3 bucket permissions and connectivity"),r.overall!=="excellent"&&a.push("Implement automated data validation and cleanup processes"),n.length>5&&a.push("Review system health monitoring thresholds and alert configurations"),a}determineOverallStatus(e,t,r,n){return e.overall==="unhealthy"||n.some(a=>a.severity==="critical")||t.errors.errorRate>10?"unhealthy":e.overall==="degraded"||n.some(a=>a.severity==="error")||t.memory.utilizationPercentage>90||t.throughput.averageResponseTime>2e3||r.overall==="poor"?"degraded":"healthy"}calculateAverageThroughputUtilization(e){return e.length===0?0:e.reduce((r,n)=>r+n.readCapacityUtilization+n.writeCapacityUtilization,0)/(e.length*2)}calculateErrorRate(e){let t=e.length,r=e.filter(n=>n.errors.length>0).length;return t>0?r/t*100:0}estimateCapacityUtilization(e,t){return e>2e3?90:e>1e3?70:e>500?50:30}getDefaultPerformanceMetrics(){return{memory:{current:0,peak:0,limit:512,utilizationPercentage:0,gcFrequency:0},execution:{coldStartFrequency:0,averageExecutionTime:0,p95ExecutionTime:0,p99ExecutionTime:0,timeouts:0},throughput:{requestsPerSecond:0,requestsPerMinute:0,requestsPerHour:0,peakThroughput:0,averageResponseTime:0},errors:{errorRate:0,errorCount:0,errorsByType:{},criticalErrors:0,warnings:0},trends:{responseTimeTrend:"stable",errorRateTrend:"stable",throughputTrend:"stable",memoryUsageTrend:"stable"}}}getAverageResponseTime(){return 500}getPercentileResponseTime(e){return 500*(e/50)}getCurrentRPS(){return 10}getCurrentRPM(){return 600}getCurrentRPH(){return 36e3}getPeakThroughput(){return 50}getCurrentErrorRate(){return .5}getCurrentErrorCount(){return 2}getErrorsByType(){return{ValidationError:1,TimeoutError:1}}analyzeResponseTimeTrend(){return"stable"}analyzeErrorRateTrend(){return"stable"}analyzeThroughputTrend(){return"stable"}analyzeMemoryUsageTrend(){return"stable"}determineSeverity(e,t){if(t.comparison==="greater_than"){if(e>=t.criticalThreshold)return"critical";if(e>=t.errorThreshold)return"error";if(e>=t.warningThreshold)return"warning"}return"info"}getThresholdValue(e,t){switch(t){case"warning":return e.warningThreshold;case"error":return e.errorThreshold;case"critical":return e.criticalThreshold}}getAlertImpact(e,t){return{response_time:"Slow response times affect user experience and system performance",error_rate:"High error rates indicate system instability and affect reliability",memory_usage:"High memory usage can lead to performance degradation and function failures"}[e]||"System performance may be impacted"}getAlertRecommendations(e,t){return{response_time:["Optimize database queries","Implement caching","Review Lambda configuration"],error_rate:["Check error logs","Review code for error handling","Monitor external dependencies"],memory_usage:["Increase Lambda memory allocation","Optimize memory usage in code","Review data structures"]}[e]||["Review system configuration and performance"]}getLastHealthCheck(){return this.lastHealthCheck}updateConfig(e){this.config={...this.config,...e},this.logger.info("Health check configuration updated",{config:this.config})}};var U=require("@aws-sdk/client-dynamodb"),p=require("@aws-sdk/lib-dynamodb");var H=class{constructor(){this.performanceBuffer=new Map;this.metricsCache=new Map;this.logger=new v("MonitoringService");let e=new U.DynamoDBClient({region:process.env.AWS_REGION||"us-east-1"});this.client=p.DynamoDBDocumentClient.from(e),this.metricsTable=process.env.HEALTH_METRICS_TABLE||"StudyApp-HealthMetrics",this.alertsTable=process.env.HEALTH_ALERTS_TABLE||"StudyApp-HealthAlerts",this.logger.info("MonitoringService initialized",{metricsTable:this.metricsTable,alertsTable:this.alertsTable}),this.startMetricsCollection()}async recordMetrics(e){try{let t=new Date().toISOString(),r=Math.floor(Date.now()/1e3)+30*24*60*60;await this.client.send(new p.PutCommand({TableName:this.metricsTable,Item:{PK:"METRICS",SK:`${t}`,timestamp:t,metrics:e,ttl:r}})),this.metricsCache.set("latest",e),this.logger.debug("Performance metrics recorded",{timestamp:t})}catch(t){this.logger.error("Failed to record metrics",{error:t})}}async recordHealthHistory(e){try{let t=new Date().toISOString(),r=Math.floor(Date.now()/1e3)+90*24*60*60,n={timestamp:t,overallStatus:e.status,componentStatuses:{dynamodb:e.dependencies.dynamodb.status,s3:e.dependencies.s3.status,overall:e.dependencies.overall},metrics:{responseTime:e.performance.throughput.averageResponseTime,errorRate:e.performance.errors.errorRate,throughput:e.performance.throughput.requestsPerSecond,memoryUsage:e.performance.memory.utilizationPercentage},alerts:e.alerts.length,incidents:e.alerts.filter(a=>a.severity==="critical"||a.severity==="error").length};await this.client.send(new p.PutCommand({TableName:this.metricsTable,Item:{PK:"HEALTH_HISTORY",SK:t,...n,ttl:r}})),this.logger.debug("Health history recorded",{timestamp:t,status:e.status})}catch(t){this.logger.error("Failed to record health history",{error:t})}}async storeAlert(e){try{let t=Math.floor(Date.now()/1e3)+5184e3;await this.client.send(new p.PutCommand({TableName:this.alertsTable,Item:{PK:"ALERT",SK:`${e.createdAt}#${e.alertId}`,...e,ttl:t}})),this.logger.info("Alert stored",{alertId:e.alertId,severity:e.severity,category:e.category})}catch(t){this.logger.error("Failed to store alert",{alertId:e.alertId,error:t})}}async acknowledgeAlert(e,t){try{let r=await this.client.send(new p.QueryCommand({TableName:this.alertsTable,KeyConditionExpression:"PK = :pk",FilterExpression:"alertId = :alertId",ExpressionAttributeValues:{":pk":"ALERT",":alertId":e}}));if(r.Items&&r.Items.length>0){let n=r.Items[0];n&&(await this.client.send(new p.UpdateCommand({TableName:this.alertsTable,Key:{PK:n.PK,SK:n.SK},UpdateExpression:"SET acknowledged = :ack, acknowledgedBy = :by, resolvedAt = :resolved",ExpressionAttributeValues:{":ack":!0,":by":t,":resolved":new Date().toISOString()}})),this.logger.info("Alert acknowledged",{alertId:e,acknowledgedBy:t}))}}catch(r){this.logger.error("Failed to acknowledge alert",{alertId:e,error:r})}}async getHealthHistory(e){try{let t=new Date().toISOString(),r=this.calculateStartTime(e.timeRange),a=((await this.client.send(new p.QueryCommand({TableName:this.metricsTable,KeyConditionExpression:"PK = :pk AND SK BETWEEN :start AND :end",ExpressionAttributeValues:{":pk":"HEALTH_HISTORY",":start":r,":end":t},ScanIndexForward:!0,Limit:1e3}))).Items||[]).map(l=>({timestamp:l.timestamp,overallStatus:l.overallStatus,componentStatuses:l.componentStatuses,metrics:l.metrics,alerts:l.alerts,incidents:l.incidents})),i=this.applyResolutionFilter(a,e.resolution),s=this.calculateHistorySummary(a);return{entries:i,summary:s}}catch(t){return this.logger.error("Failed to get health history",{error:t}),{entries:[],summary:{totalDataPoints:0,averageHealth:0,incidents:0,majorOutages:0}}}}async generateHealthReport(e){try{this.logger.info("Generating health report",{timeRange:e.timeRange,includeRecommendations:e.includeRecommendations});let t={timeRange:this.calculateTimeRangeFromDates(e.timeRange.start,e.timeRange.end),resolution:"hour"},r=await this.getHealthHistory(t),n=await this.getAlertsForTimeRange(e.timeRange.start,e.timeRange.end),a=this.generateReportSummary(r.entries,n),i=this.analyzeTrends(r.entries),s=this.getTopIssues(n),l=e.includeRecommendations?await this.generateRecommendations(r.entries,n):[],u={reportId:y(),generatedAt:new Date().toISOString(),timeRange:{start:e.timeRange.start,end:e.timeRange.end,duration:this.calculateDuration(e.timeRange.start,e.timeRange.end)},summary:a,trends:i,topIssues:s,recommendations:l,history:r.entries};return await this.storeReport(u),this.logger.info("Health report generated",{reportId:u.reportId,dataPoints:r.entries.length,alertsAnalyzed:n.length}),{report:u}}catch(t){throw this.logger.error("Failed to generate health report",{error:t}),t}}async getPerformanceTrends(e){try{let t={timeRange:e,resolution:e==="hour"?"minute":e==="day"?"hour":"day"},r=await this.getHealthHistory(t);return this.calculateDetailedTrends(r.entries)}catch(t){return this.logger.error("Failed to get performance trends",{error:t}),null}}async getUptimeStats(){try{let e=new Date,t=new Date(e.getTime()-24*60*60*1e3).toISOString(),r=new Date(e.getTime()-7*24*60*60*1e3).toISOString(),n=new Date(e.getTime()-30*24*60*60*1e3).toISOString(),[a,i,s]=await Promise.all([this.calculateUptimeForPeriod(t,e.toISOString()),this.calculateUptimeForPeriod(r,e.toISOString()),this.calculateUptimeForPeriod(n,e.toISOString())]);return{current:a,last24h:a,last7d:i,last30d:s}}catch(e){return this.logger.error("Failed to get uptime stats",{error:e}),{current:0,last24h:0,last7d:0,last30d:0}}}startMetricsCollection(){setInterval(()=>{this.collectSystemMetrics()},6e4)}async collectSystemMetrics(){try{let e=process.memoryUsage(),t=parseInt(process.env.AWS_LAMBDA_FUNCTION_MEMORY_SIZE||"512"),r={memory:{current:Math.round(e.rss/1024/1024),peak:Math.round(e.heapUsed/1024/1024),limit:t,utilizationPercentage:Math.round(e.rss/1024/1024/t*100),gcFrequency:0},execution:{coldStartFrequency:0,averageExecutionTime:0,p95ExecutionTime:0,p99ExecutionTime:0,timeouts:0},throughput:{requestsPerSecond:0,requestsPerMinute:0,requestsPerHour:0,peakThroughput:0,averageResponseTime:0},errors:{errorRate:0,errorCount:0,errorsByType:{},criticalErrors:0,warnings:0},trends:{responseTimeTrend:"stable",errorRateTrend:"stable",throughputTrend:"stable",memoryUsageTrend:"stable"}};this.recordMetrics(r).catch(n=>{this.logger.warn("Background metrics recording failed",{error:n})})}catch(e){this.logger.warn("Background metrics collection failed",{error:e})}}calculateStartTime(e){let t=new Date,r=1;switch(e){case"hour":r=1;break;case"day":r=24;break;case"week":r=24*7;break;case"month":r=24*30;break}return new Date(t.getTime()-r*60*60*1e3).toISOString()}calculateTimeRangeFromDates(e,t){let n=(new Date(t).getTime()-new Date(e).getTime())/(1e3*60*60);return n<=1?"hour":n<=24?"day":n<=168?"week":"month"}calculateDuration(e,t){let r=new Date(t).getTime()-new Date(e).getTime(),n=Math.round(r/(1e3*60*60));return n<24?`${n}h`:`${Math.round(n/24)}d`}applyResolutionFilter(e,t){if(!t||e.length<=100)return e;let r=t==="minute"?1:t==="hour"?60:1440;return e.filter((n,a)=>a%r===0)}calculateHistorySummary(e){let t=e.length,r=e.filter(s=>s.overallStatus==="healthy").length,n=t>0?r/t*100:0,a=e.reduce((s,l)=>s+l.incidents,0),i=e.filter(s=>s.overallStatus==="unhealthy").length;return{totalDataPoints:t,averageHealth:n,incidents:a,majorOutages:i}}async getAlertsForTimeRange(e,t){try{return(await this.client.send(new p.QueryCommand({TableName:this.alertsTable,KeyConditionExpression:"PK = :pk AND SK BETWEEN :start AND :end",ExpressionAttributeValues:{":pk":"ALERT",":start":e,":end":t}}))).Items||[]}catch(r){return this.logger.error("Failed to get alerts for time range",{error:r}),[]}}generateReportSummary(e,t){let r=e.length,n=e.filter(h=>h.overallStatus==="healthy").length,a=r>0?n/r*100:100,i=t.length,s=t.filter(h=>h.resolvedAt).length,l=e.map(h=>h.metrics.responseTime).filter(h=>h>0),u=l.length>0?l.reduce((h,C)=>h+C,0)/l.length:0,c=e.map(h=>h.metrics.errorRate).filter(h=>h>0),g=c.length>0?c.reduce((h,C)=>h+C,0)/c.length:0;return{overallHealth:a>=99.9?"excellent":a>=99.5?"good":a>=95?"fair":"poor",uptimePercentage:a,totalIncidents:i,resolvedIncidents:s,averageResponseTime:u,errorRate:g}}analyzeTrends(e){if(e.length<2)return{availabilityTrend:"stable",performanceTrend:"stable",errorTrend:"stable",dataQualityTrend:"stable"};let t=Math.floor(e.length/2),r=e.slice(0,t),n=e.slice(t),a=r.filter(g=>g.overallStatus==="healthy").length/r.length,i=n.filter(g=>g.overallStatus==="healthy").length/n.length,s=r.reduce((g,f)=>g+f.metrics.responseTime,0)/r.length,l=n.reduce((g,f)=>g+f.metrics.responseTime,0)/n.length,u=r.reduce((g,f)=>g+f.metrics.errorRate,0)/r.length,c=n.reduce((g,f)=>g+f.metrics.errorRate,0)/n.length;return{availabilityTrend:i>a?"improving":i<a?"degrading":"stable",performanceTrend:l<s?"improving":l>s?"degrading":"stable",errorTrend:c<u?"improving":c>u?"degrading":"stable",dataQualityTrend:"stable"}}getTopIssues(e){return e.filter(t=>t.severity==="critical"||t.severity==="error").sort((t,r)=>{let n={critical:0,error:1,warning:2,info:3};return n[t.severity]-n[r.severity]}).slice(0,10)}async generateRecommendations(e,t){let r=[],n=e.reduce((s,l)=>s+l.metrics.responseTime,0)/e.length,a=e.reduce((s,l)=>s+l.metrics.errorRate,0)/e.length,i=e.reduce((s,l)=>s+l.metrics.memoryUsage,0)/e.length;return n>1e3&&r.push({id:y(),priority:"high",category:"performance",title:"Optimize Response Time",description:"Average response time is above optimal threshold",reasoning:`Current average response time of ${Math.round(n)}ms exceeds the 1000ms threshold`,actionItems:["Implement database query optimization","Add caching layer for frequently accessed data","Review Lambda memory allocation","Optimize code execution paths"],estimatedImpact:{performance:30,cost:0,reliability:10},effort:"medium",timeline:"2-4 weeks"}),a>1&&r.push({id:y(),priority:"high",category:"reliability",title:"Reduce Error Rate",description:"Error rate is higher than acceptable levels",reasoning:`Current error rate of ${a.toFixed(2)}% exceeds the 1% threshold`,actionItems:["Review and improve error handling","Implement retry mechanisms","Add input validation","Monitor third-party dependencies"],estimatedImpact:{performance:10,cost:0,reliability:40},effort:"medium",timeline:"1-2 weeks"}),i>80&&r.push({id:y(),priority:"medium",category:"performance",title:"Optimize Memory Usage",description:"Memory utilization is approaching limits",reasoning:`Current average memory usage of ${Math.round(i)}% is above the 80% threshold`,actionItems:["Increase Lambda memory allocation","Optimize data structures and algorithms","Implement memory cleanup routines","Profile memory usage patterns"],estimatedImpact:{performance:20,cost:-100,reliability:15},effort:"low",timeline:"1 week"}),r}calculateDetailedTrends(e){return{responseTime:e.map(t=>({timestamp:t.timestamp,value:t.metrics.responseTime})),errorRate:e.map(t=>({timestamp:t.timestamp,value:t.metrics.errorRate})),throughput:e.map(t=>({timestamp:t.timestamp,value:t.metrics.throughput})),memoryUsage:e.map(t=>({timestamp:t.timestamp,value:t.metrics.memoryUsage}))}}async calculateUptimeForPeriod(e,t){try{let n=(await this.client.send(new p.QueryCommand({TableName:this.metricsTable,KeyConditionExpression:"PK = :pk AND SK BETWEEN :start AND :end",ExpressionAttributeValues:{":pk":"HEALTH_HISTORY",":start":e,":end":t}}))).Items||[];return n.length===0?100:n.filter(i=>i.overallStatus==="healthy").length/n.length*100}catch(r){return this.logger.error("Failed to calculate uptime",{error:r}),100}}async storeReport(e){try{let t=Math.floor(Date.now()/1e3)+31536e3;await this.client.send(new p.PutCommand({TableName:this.metricsTable,Item:{PK:"REPORT",SK:`${e.generatedAt}#${e.reportId}`,...e,ttl:t}}))}catch(t){this.logger.warn("Failed to store report",{reportId:e.reportId,error:t})}}};var D=class extends w{constructor(){super("HealthHandler"),this.healthService=new I,this.monitoringService=new H}async checkHealth(e){this.logger.info("Basic health check requested");try{let t=await this.healthService.performHealthCheck();await this.monitoringService.recordHealthHistory(t);let r={status:t.status,version:this.version,stage:t.environment.stage,timestamp:t.timestamp,uptime:t.environment.uptime,dependencies:{overall:t.dependencies.overall,dynamodb:t.dependencies.dynamodb.status,s3:t.dependencies.s3.status},alerts:t.alerts.length,recommendations:t.recommendations.length};return this.success(r,"Health check completed successfully")}catch(t){return this.logger.error("Health check failed",{error:t}),this.internalError("Health check failed")}}async getDetailedHealth(e){this.logger.info("Detailed health check requested");try{let t=e.queryStringParameters?.includeHistory==="true",r=await this.healthService.performHealthCheck();await this.monitoringService.recordHealthHistory(r);let n=await this.monitoringService.getUptimeStats(),a;if(t){let s={timeRange:"day",resolution:"hour"};a=(await this.monitoringService.getHealthHistory(s)).entries.slice(-24)}let i={health:r,history:a,uptime:n};return this.success(i,"Detailed health check completed successfully")}catch(t){return this.logger.error("Detailed health check failed",{error:t}),this.internalError("Detailed health check failed")}}async getPerformanceMetrics(e){this.logger.info("Performance metrics requested");try{let t=e.queryStringParameters?.timeRange||"day",r=e.queryStringParameters?.includeHistorical==="true",a=(await this.healthService.performHealthCheck()).performance;await this.monitoringService.recordMetrics(a);let i;r&&(i=await this.monitoringService.getPerformanceTrends(t));let s={current:a,historical:i,trends:a.trends};return this.success(s,"Performance metrics retrieved successfully")}catch(t){return this.logger.error("Performance metrics retrieval failed",{error:t}),this.internalError("Performance metrics retrieval failed")}}async getDatabaseHealth(e){this.logger.info("Database health check requested");try{let t=await this.healthService.performHealthCheck(),n={...t.dependencies.dynamodb,timestamp:t.timestamp,environment:{region:t.environment.region,stage:t.environment.stage},dataQuality:t.dataQuality.checks.filter(a=>a.table.includes("Users")||a.table.includes("Sessions")||a.table.includes("Goals")||a.table.includes("Analytics"))};return this.success(n,"Database health check completed successfully")}catch(t){return this.logger.error("Database health check failed",{error:t}),this.internalError("Database health check failed")}}async getStorageHealth(e){this.logger.info("Storage health check requested");try{let t=await this.healthService.performHealthCheck(),n={...t.dependencies.s3,timestamp:t.timestamp,environment:{region:t.environment.region,stage:t.environment.stage},alerts:t.alerts.filter(a=>a.category==="availability"||a.source.toLowerCase().includes("s3"))};return this.success(n,"Storage health check completed successfully")}catch(t){return this.logger.error("Storage health check failed",{error:t}),this.internalError("Storage health check failed")}}async getServicesOverview(e){this.logger.info("Services overview requested");try{let t=await this.healthService.performHealthCheck(),r={timestamp:t.timestamp,overallStatus:t.status,services:{database:{service:"DynamoDB",status:t.dependencies.dynamodb.status,responseTime:t.dependencies.dynamodb.connectivity.responseTime,tables:t.dependencies.dynamodb.tables.length,errors:t.dependencies.dynamodb.tables.reduce((n,a)=>n+a.errors.length,0)},storage:{service:"S3",status:t.dependencies.s3.status,responseTime:t.dependencies.s3.connectivity.responseTime,buckets:t.dependencies.s3.buckets.length,errors:t.dependencies.s3.buckets.reduce((n,a)=>n+a.errors.length,0)},external:t.dependencies.external.map(n=>({service:n.serviceName,status:n.status,responseTime:n.responseTime,uptime:n.uptime,errors:n.errors.length}))},performance:{averageResponseTime:t.performance.throughput.averageResponseTime,errorRate:t.performance.errors.errorRate,memoryUsage:t.performance.memory.utilizationPercentage,throughput:t.performance.throughput.requestsPerSecond},summary:{totalServices:2+t.dependencies.external.length,healthyServices:[t.dependencies.dynamodb.status==="healthy"?1:0,t.dependencies.s3.status==="healthy"?1:0,...t.dependencies.external.map(n=>n.status==="healthy"?1:0)].reduce((n,a)=>n+a,0),alerts:t.alerts.length,recommendations:t.recommendations.length}};return this.success(r,"Services overview retrieved successfully")}catch(t){return this.logger.error("Services overview retrieval failed",{error:t}),this.internalError("Services overview retrieval failed")}}async getAlerts(e){this.logger.info("Alerts requested");try{let t=e.queryStringParameters?.severity,r=e.queryStringParameters?.category,n=parseInt(e.queryStringParameters?.limit||"50"),a=await this.healthService.performHealthCheck(),i=a.alerts;t&&(i=i.filter(c=>c.severity===t)),r&&(i=i.filter(c=>c.category===r)),i=i.slice(0,n);let s=a.alerts,l={total:s.length,active:s.filter(c=>!c.resolvedAt).length,resolved:s.filter(c=>c.resolvedAt).length,acknowledged:s.filter(c=>c.acknowledged).length,bySeverity:{critical:s.filter(c=>c.severity==="critical").length,error:s.filter(c=>c.severity==="error").length,warning:s.filter(c=>c.severity==="warning").length,info:s.filter(c=>c.severity==="info").length},byCategory:{performance:s.filter(c=>c.category==="performance").length,availability:s.filter(c=>c.category==="availability").length,data_quality:s.filter(c=>c.category==="data_quality").length,security:s.filter(c=>c.category==="security").length,capacity:s.filter(c=>c.category==="capacity").length}},u={alerts:i,summary:l};return this.success(u,"Alerts retrieved successfully")}catch(t){return this.logger.error("Alerts retrieval failed",{error:t}),this.internalError("Alerts retrieval failed")}}async getHealthHistory(e){this.logger.info("Health history requested");try{let t=e.queryStringParameters?.timeRange||"day",r=e.queryStringParameters?.resolution,n=e.queryStringParameters?.components?.split(","),a={timeRange:t,resolution:r,components:n},i=await this.monitoringService.getHealthHistory(a);return this.success(i,"Health history retrieved successfully")}catch(t){return this.logger.error("Health history retrieval failed",{error:t}),this.internalError("Health history retrieval failed")}}async generateHealthReport(e){this.logger.info("Health report generation requested");try{let t=JSON.parse(e.body||"{}");if(!t.timeRange?.start||!t.timeRange?.end)return this.badRequest("Time range is required");let r=await this.monitoringService.generateHealthReport(t);return this.success(r,"Health report generated successfully")}catch(t){return this.logger.error("Health report generation failed",{error:t}),this.internalError("Health report generation failed")}}async acknowledgeAlert(e){this.logger.info("Alert acknowledgment requested");try{let t=e.pathParameters?.alertId,n=JSON.parse(e.body||"{}").acknowledgedBy||"system";return t?(await this.monitoringService.acknowledgeAlert(t,n),this.success({alertId:t,acknowledgedBy:n,acknowledgedAt:new Date().toISOString()},"Alert acknowledged successfully")):this.badRequest("Alert ID is required")}catch(t){return this.logger.error("Alert acknowledgment failed",{error:t}),this.internalError("Alert acknowledgment failed")}}},b=new D,j=b.withoutAuth(async o=>{let e=o.pathParameters?.proxy||o.resource?.split("/").pop()||"",t=o.httpMethod;try{switch(!0){case(e==="detailed"&&t==="GET"):return await b.getDetailedHealth(o);case(e==="performance"&&t==="GET"):return await b.getPerformanceMetrics(o);case(e==="database"&&t==="GET"):return await b.getDatabaseHealth(o);case(e==="storage"&&t==="GET"):return await b.getStorageHealth(o);case(e==="services"&&t==="GET"):return await b.getServicesOverview(o);case(e==="alerts"&&t==="GET"):return await b.getAlerts(o);case(e==="history"&&t==="GET"):return await b.getHealthHistory(o);case(e==="report"&&t==="POST"):return await b.generateHealthReport(o);case(e.includes("alerts")&&e.includes("acknowledge")&&t==="PUT"):return await b.acknowledgeAlert(o);default:return await b.checkHealth(o)}}catch{return{statusCode:500,headers:{"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Headers":"Content-Type,Authorization","Access-Control-Allow-Methods":"GET,POST,PUT,DELETE,OPTIONS"},body:JSON.stringify({success:!1,error:"Internal server error",timestamp:new Date().toISOString(),version:"2.0.0"})}}});0&&(module.exports={handler});
//# sourceMappingURL=index.js.map
