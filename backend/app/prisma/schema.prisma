generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions     StudySession[]
  progress     UserProgress[]
  achievements Achievement[]

  @@map("users")
}

model StudySession {
  id          String                @id @default(uuid())
  userId      String
  provider    String
  examCode    String?
  sessionType StudySessionType
  name        String?
  config      Json
  progress    Json                  @default("{}")
  status      StudySessionStatus    @default(ACTIVE)
  startedAt   DateTime              @default(now())
  completedAt DateTime?
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt

  user    User           @relation(fields: [userId], references: [id])
  answers SessionAnswer[]

  @@index([userId, provider])
  @@index([status, startedAt])
  @@map("study_sessions")
}

model SessionAnswer {
  id              String   @id @default(uuid())
  sessionId       String
  questionId      String
  selectedAnswers String[]
  isCorrect       Boolean
  timeSpent       Int      @default(0) // seconds
  confidence      Int?     // 1-5 scale
  flagged         Boolean  @default(false)
  answeredAt      DateTime @default(now())

  session StudySession @relation(fields: [sessionId], references: [id])

  @@index([sessionId])
  @@index([questionId])
  @@map("session_answers")
}

model UserProgress {
  id                String   @id @default(uuid())
  userId            String
  provider          String
  examCode          String?
  topic             String
  questionsAnswered Int      @default(0)
  correctAnswers    Int      @default(0)
  lastStudiedAt     DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, provider, examCode, topic])
  @@index([userId, provider])
  @@map("user_progress")
}

model QuestionStatistic {
  id                    String   @id @default(uuid())
  provider              String
  examCode              String?
  questionHash          String   // Hash of question content for privacy
  timesAnswered         Int      @default(0)
  timesCorrect          Int      @default(0)
  averageTimeSeconds    Float?
  difficultyRating      Float?
  lastAnsweredAt        DateTime @default(now())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@unique([provider, examCode, questionHash])
  @@index([provider, examCode])
  @@map("question_statistics")
}

model Achievement {
  id          String   @id @default(uuid())
  userId      String
  type        String   // streak, accuracy, completion, etc.
  title       String
  description String
  points      Int      @default(0)
  earnedAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId, type])
  @@map("achievements")
}

enum StudySessionType {
  PRACTICE
  TIMED
  TOPIC_FOCUS
  REVIEW
  MIXED_PROVIDER

  @@map("study_session_type")
}

enum StudySessionStatus {
  ACTIVE
  COMPLETED
  PAUSED
  ABANDONED

  @@map("study_session_status")
}
